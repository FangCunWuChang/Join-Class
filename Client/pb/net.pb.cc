// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace JC {
namespace Net {
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classes_()
  , user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newuser_(nullptr)
  , task_(nullptr)
  , type_(0)
{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Answer::Answer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classes_()
  , loglist_()
  , userlist_()
  , mesage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_(nullptr)
  , student_(nullptr)
  , type_(0)

  , usertype_(0)
{}
struct AnswerDefaultTypeInternal {
  constexpr AnswerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnswerDefaultTypeInternal() {}
  union {
    Answer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnswerDefaultTypeInternal _Answer_default_instance_;
constexpr RequestPack::RequestPack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pack_(nullptr){}
struct RequestPackDefaultTypeInternal {
  constexpr RequestPackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPackDefaultTypeInternal() {}
  union {
    RequestPack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPackDefaultTypeInternal _RequestPack_default_instance_;
constexpr AnswerPack::AnswerPack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pack_(nullptr){}
struct AnswerPackDefaultTypeInternal {
  constexpr AnswerPackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnswerPackDefaultTypeInternal() {}
  union {
    AnswerPack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnswerPackDefaultTypeInternal _AnswerPack_default_instance_;
}  // namespace Net
}  // namespace JC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_net_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_net_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, type_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, user_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, password_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, newuser_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, config_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, task_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, classes_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Request, logname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, type_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, mesage_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, usertype_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, task_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, classes_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, student_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, loglist_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, logdata_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, userlist_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::Answer, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JC::Net::RequestPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JC::Net::RequestPack, signature_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::RequestPack, pack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JC::Net::AnswerPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JC::Net::AnswerPack, signature_),
  PROTOBUF_FIELD_OFFSET(::JC::Net::AnswerPack, pack_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JC::Net::Request)},
  { 13, -1, sizeof(::JC::Net::Answer)},
  { 28, -1, sizeof(::JC::Net::RequestPack)},
  { 35, -1, sizeof(::JC::Net::AnswerPack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JC::Net::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JC::Net::_Answer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JC::Net::_RequestPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JC::Net::_AnswerPack_default_instance_),
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\006JC.Net\032\ntask.proto\032\013class.p"
  "roto\032\nuser.proto\032\rstudent.proto\"\254\003\n\007Requ"
  "est\022\"\n\004type\030\001 \001(\0162\024.JC.Net.Request.Type\022"
  "\014\n\004user\030\002 \001(\t\022\020\n\010password\030\003 \001(\014\022\031\n\007newus"
  "er\030\004 \001(\0132\010.JC.User\022\016\n\006config\030\005 \001(\t\022\026\n\004ta"
  "sk\030\006 \001(\0132\010.JC.Task\022\017\n\007classes\030\007 \003(\t\022\017\n\007l"
  "ogname\030\010 \001(\t\"\367\001\n\004Type\022\t\n\005LOGIN\020\000\022\017\n\013GETU"
  "SERLIST\020\001\022\013\n\007ADDUSER\020\002\022\016\n\nCHANGEUSER\020\003\022\013"
  "\n\007DELUSER\020\004\022\r\n\tGETCONFIG\020\005\022\r\n\tSETCONFIG\020"
  "\006\022\013\n\007GETTASK\020\007\022\013\n\007SETTASK\020\010\022\016\n\nGETSTUDEN"
  "T\020\t\022\r\n\tJOINCLASS\020\n\022\016\n\nGETLOGLIST\020\013\022\016\n\nGE"
  "TLOGDATA\020\014\022\r\n\tCLEARLOGS\020\r\022\014\n\010SHUTDOWN\020\016\022"
  "\013\n\007RESTART\020\017\022\010\n\004TEST\020\020\"\245\002\n\006Answer\022!\n\004typ"
  "e\030\001 \001(\0162\023.JC.Net.Answer.Type\022\016\n\006mesage\030\002"
  " \001(\t\022\037\n\010userType\030\003 \001(\0162\r.JC.User.Type\022\026\n"
  "\004task\030\004 \001(\0132\010.JC.Task\022\032\n\007classes\030\005 \003(\0132\t"
  ".JC.Class\022\034\n\007student\030\006 \001(\0132\013.JC.Student\022"
  "\017\n\007logList\030\007 \003(\t\022\017\n\007logData\030\010 \001(\t\022\032\n\010use"
  "rList\030\t \003(\0132\010.JC.User\022\016\n\006config\030\n \001(\t\"\'\n"
  "\004Type\022\t\n\005ERROR\020\000\022\010\n\004DONE\020\001\022\n\n\006DENIED\020\002\"\?"
  "\n\013RequestPack\022\021\n\tsignature\030\001 \001(\014\022\035\n\004pack"
  "\030\002 \001(\0132\017.JC.Net.Request\"=\n\nAnswerPack\022\021\n"
  "\tsignature\030\001 \001(\014\022\034\n\004pack\030\002 \001(\0132\016.JC.Net."
  "Answerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_net_2eproto_deps[4] = {
  &::descriptor_table_class_2eproto,
  &::descriptor_table_student_2eproto,
  &::descriptor_table_task_2eproto,
  &::descriptor_table_user_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_net_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto = {
  false, false, 934, descriptor_table_protodef_net_2eproto, "net.proto", 
  &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_net_2eproto::offsets,
  file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto, file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace JC {
namespace Net {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool Request_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_Type Request::LOGIN;
constexpr Request_Type Request::GETUSERLIST;
constexpr Request_Type Request::ADDUSER;
constexpr Request_Type Request::CHANGEUSER;
constexpr Request_Type Request::DELUSER;
constexpr Request_Type Request::GETCONFIG;
constexpr Request_Type Request::SETCONFIG;
constexpr Request_Type Request::GETTASK;
constexpr Request_Type Request::SETTASK;
constexpr Request_Type Request::GETSTUDENT;
constexpr Request_Type Request::JOINCLASS;
constexpr Request_Type Request::GETLOGLIST;
constexpr Request_Type Request::GETLOGDATA;
constexpr Request_Type Request::CLEARLOGS;
constexpr Request_Type Request::SHUTDOWN;
constexpr Request_Type Request::RESTART;
constexpr Request_Type Request::TEST;
constexpr Request_Type Request::Type_MIN;
constexpr Request_Type Request::Type_MAX;
constexpr int Request::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Answer_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool Answer_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Answer_Type Answer::ERROR;
constexpr Answer_Type Answer::DONE;
constexpr Answer_Type Answer::DENIED;
constexpr Answer_Type Answer::Type_MIN;
constexpr Answer_Type Answer::Type_MAX;
constexpr int Answer::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Request::_Internal {
 public:
  static const ::JC::User& newuser(const Request* msg);
  static const ::JC::Task& task(const Request* msg);
};

const ::JC::User&
Request::_Internal::newuser(const Request* msg) {
  return *msg->newuser_;
}
const ::JC::Task&
Request::_Internal::task(const Request* msg) {
  return *msg->task_;
}
void Request::clear_newuser() {
  if (GetArenaForAllocation() == nullptr && newuser_ != nullptr) {
    delete newuser_;
  }
  newuser_ = nullptr;
}
void Request::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JC.Net.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config().empty()) {
    config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config(), 
      GetArenaForAllocation());
  }
  logname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logname().empty()) {
    logname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_newuser()) {
    newuser_ = new ::JC::User(*from.newuser_);
  } else {
    newuser_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::JC::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:JC.Net.Request)
}

inline void Request::SharedCtor() {
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&newuser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&newuser_)) + sizeof(type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:JC.Net.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete newuser_;
  if (this != internal_default_instance()) delete task_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:JC.Net.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  user_.ClearToEmpty();
  password_.ClearToEmpty();
  config_.ClearToEmpty();
  logname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && newuser_ != nullptr) {
    delete newuser_;
  }
  newuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JC.Net.Request.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::JC::Net::Request_Type>(val));
        } else goto handle_unusual;
        continue;
      // string user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Request.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JC.User newuser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_newuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Request.config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JC.Task task = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string classes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_classes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Request.classes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string logname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_logname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Request.logname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JC.Net.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JC.Net.Request.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Request.user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user(), target);
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  // .JC.User newuser = 4;
  if (this->_internal_has_newuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::newuser(this), target, stream);
  }

  // string config = 5;
  if (!this->_internal_config().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config().data(), static_cast<int>(this->_internal_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Request.config");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_config(), target);
  }

  // .JC.Task task = 6;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::task(this), target, stream);
  }

  // repeated string classes = 7;
  for (int i = 0, n = this->_internal_classes_size(); i < n; i++) {
    const auto& s = this->_internal_classes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Request.classes");
    target = stream->WriteString(7, s, target);
  }

  // string logname = 8;
  if (!this->_internal_logname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logname().data(), static_cast<int>(this->_internal_logname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Request.logname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_logname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JC.Net.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JC.Net.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string classes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(classes_.size());
  for (int i = 0, n = classes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      classes_.Get(i));
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // string config = 5;
  if (!this->_internal_config().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config());
  }

  // string logname = 8;
  if (!this->_internal_logname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logname());
  }

  // .JC.User newuser = 4;
  if (this->_internal_has_newuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newuser_);
  }

  // .JC.Task task = 6;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .JC.Net.Request.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JC.Net.Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_config().empty()) {
    _internal_set_config(from._internal_config());
  }
  if (!from._internal_logname().empty()) {
    _internal_set_logname(from._internal_logname());
  }
  if (from._internal_has_newuser()) {
    _internal_mutable_newuser()->::JC::User::MergeFrom(from._internal_newuser());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::JC::Task::MergeFrom(from._internal_task());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JC.Net.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, GetArenaForAllocation(),
      &other->user_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_, GetArenaForAllocation(),
      &other->config_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logname_, GetArenaForAllocation(),
      &other->logname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, type_)
      + sizeof(Request::type_)
      - PROTOBUF_FIELD_OFFSET(Request, newuser_)>(
          reinterpret_cast<char*>(&newuser_),
          reinterpret_cast<char*>(&other->newuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// ===================================================================

class Answer::_Internal {
 public:
  static const ::JC::Task& task(const Answer* msg);
  static const ::JC::Student& student(const Answer* msg);
};

const ::JC::Task&
Answer::_Internal::task(const Answer* msg) {
  return *msg->task_;
}
const ::JC::Student&
Answer::_Internal::student(const Answer* msg) {
  return *msg->student_;
}
void Answer::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
void Answer::clear_classes() {
  classes_.Clear();
}
void Answer::clear_student() {
  if (GetArenaForAllocation() == nullptr && student_ != nullptr) {
    delete student_;
  }
  student_ = nullptr;
}
void Answer::clear_userlist() {
  userlist_.Clear();
}
Answer::Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classes_(arena),
  loglist_(arena),
  userlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JC.Net.Answer)
}
Answer::Answer(const Answer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classes_(from.classes_),
      loglist_(from.loglist_),
      userlist_(from.userlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mesage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mesage().empty()) {
    mesage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mesage(), 
      GetArenaForAllocation());
  }
  logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logdata().empty()) {
    logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logdata(), 
      GetArenaForAllocation());
  }
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config().empty()) {
    config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task()) {
    task_ = new ::JC::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  if (from._internal_has_student()) {
    student_ = new ::JC::Student(*from.student_);
  } else {
    student_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&usertype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(usertype_));
  // @@protoc_insertion_point(copy_constructor:JC.Net.Answer)
}

inline void Answer::SharedCtor() {
mesage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usertype_) -
    reinterpret_cast<char*>(&task_)) + sizeof(usertype_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:JC.Net.Answer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Answer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mesage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete student_;
}

void Answer::ArenaDtor(void* object) {
  Answer* _this = reinterpret_cast< Answer* >(object);
  (void)_this;
}
void Answer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:JC.Net.Answer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  loglist_.Clear();
  userlist_.Clear();
  mesage_.ClearToEmpty();
  logdata_.ClearToEmpty();
  config_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  if (GetArenaForAllocation() == nullptr && student_ != nullptr) {
    delete student_;
  }
  student_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usertype_) -
      reinterpret_cast<char*>(&type_)) + sizeof(usertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Answer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JC.Net.Answer.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::JC::Net::Answer_Type>(val));
        } else goto handle_unusual;
        continue;
      // string mesage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mesage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Answer.mesage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JC.User.Type userType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usertype(static_cast<::JC::User_Type>(val));
        } else goto handle_unusual;
        continue;
      // .JC.Task task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .JC.Class classes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .JC.Student student = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_student(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string logList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loglist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Answer.logList"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string logData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_logdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Answer.logData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .JC.User userList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JC.Net.Answer.config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Answer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JC.Net.Answer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JC.Net.Answer.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string mesage = 2;
  if (!this->_internal_mesage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesage().data(), static_cast<int>(this->_internal_mesage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Answer.mesage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mesage(), target);
  }

  // .JC.User.Type userType = 3;
  if (this->_internal_usertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_usertype(), target);
  }

  // .JC.Task task = 4;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::task(this), target, stream);
  }

  // repeated .JC.Class classes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_classes(i), target, stream);
  }

  // .JC.Student student = 6;
  if (this->_internal_has_student()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::student(this), target, stream);
  }

  // repeated string logList = 7;
  for (int i = 0, n = this->_internal_loglist_size(); i < n; i++) {
    const auto& s = this->_internal_loglist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Answer.logList");
    target = stream->WriteString(7, s, target);
  }

  // string logData = 8;
  if (!this->_internal_logdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logdata().data(), static_cast<int>(this->_internal_logdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Answer.logData");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_logdata(), target);
  }

  // repeated .JC.User userList = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_userlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_userlist(i), target, stream);
  }

  // string config = 10;
  if (!this->_internal_config().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config().data(), static_cast<int>(this->_internal_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JC.Net.Answer.config");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JC.Net.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JC.Net.Answer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .JC.Class classes = 5;
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string logList = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loglist_.size());
  for (int i = 0, n = loglist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loglist_.Get(i));
  }

  // repeated .JC.User userList = 9;
  total_size += 1UL * this->_internal_userlist_size();
  for (const auto& msg : this->userlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mesage = 2;
  if (!this->_internal_mesage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesage());
  }

  // string logData = 8;
  if (!this->_internal_logdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logdata());
  }

  // string config = 10;
  if (!this->_internal_config().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config());
  }

  // .JC.Task task = 4;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .JC.Student student = 6;
  if (this->_internal_has_student()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *student_);
  }

  // .JC.Net.Answer.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .JC.User.Type userType = 3;
  if (this->_internal_usertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Answer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Answer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Answer::GetClassData() const { return &_class_data_; }

void Answer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Answer *>(to)->MergeFrom(
      static_cast<const Answer &>(from));
}


void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JC.Net.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  loglist_.MergeFrom(from.loglist_);
  userlist_.MergeFrom(from.userlist_);
  if (!from._internal_mesage().empty()) {
    _internal_set_mesage(from._internal_mesage());
  }
  if (!from._internal_logdata().empty()) {
    _internal_set_logdata(from._internal_logdata());
  }
  if (!from._internal_config().empty()) {
    _internal_set_config(from._internal_config());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::JC::Task::MergeFrom(from._internal_task());
  }
  if (from._internal_has_student()) {
    _internal_mutable_student()->::JC::Student::MergeFrom(from._internal_student());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_usertype() != 0) {
    _internal_set_usertype(from._internal_usertype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JC.Net.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::InternalSwap(Answer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
  loglist_.InternalSwap(&other->loglist_);
  userlist_.InternalSwap(&other->userlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mesage_, GetArenaForAllocation(),
      &other->mesage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logdata_, GetArenaForAllocation(),
      &other->logdata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_, GetArenaForAllocation(),
      &other->config_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Answer, usertype_)
      + sizeof(Answer::usertype_)
      - PROTOBUF_FIELD_OFFSET(Answer, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Answer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}

// ===================================================================

class RequestPack::_Internal {
 public:
  static const ::JC::Net::Request& pack(const RequestPack* msg);
};

const ::JC::Net::Request&
RequestPack::_Internal::pack(const RequestPack* msg) {
  return *msg->pack_;
}
RequestPack::RequestPack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JC.Net.RequestPack)
}
RequestPack::RequestPack(const RequestPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pack()) {
    pack_ = new ::JC::Net::Request(*from.pack_);
  } else {
    pack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:JC.Net.RequestPack)
}

inline void RequestPack::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pack_ = nullptr;
}

RequestPack::~RequestPack() {
  // @@protoc_insertion_point(destructor:JC.Net.RequestPack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestPack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pack_;
}

void RequestPack::ArenaDtor(void* object) {
  RequestPack* _this = reinterpret_cast< RequestPack* >(object);
  (void)_this;
}
void RequestPack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPack::Clear() {
// @@protoc_insertion_point(message_clear_start:JC.Net.RequestPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pack_ != nullptr) {
    delete pack_;
  }
  pack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JC.Net.Request pack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JC.Net.RequestPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // .JC.Net.Request pack = 2;
  if (this->_internal_has_pack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JC.Net.RequestPack)
  return target;
}

size_t RequestPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JC.Net.RequestPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .JC.Net.Request pack = 2;
  if (this->_internal_has_pack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pack_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestPack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPack::GetClassData() const { return &_class_data_; }

void RequestPack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestPack *>(to)->MergeFrom(
      static_cast<const RequestPack &>(from));
}


void RequestPack::MergeFrom(const RequestPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JC.Net.RequestPack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_pack()) {
    _internal_mutable_pack()->::JC::Net::Request::MergeFrom(from._internal_pack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestPack::CopyFrom(const RequestPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JC.Net.RequestPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPack::IsInitialized() const {
  return true;
}

void RequestPack::InternalSwap(RequestPack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(pack_, other->pack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}

// ===================================================================

class AnswerPack::_Internal {
 public:
  static const ::JC::Net::Answer& pack(const AnswerPack* msg);
};

const ::JC::Net::Answer&
AnswerPack::_Internal::pack(const AnswerPack* msg) {
  return *msg->pack_;
}
AnswerPack::AnswerPack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JC.Net.AnswerPack)
}
AnswerPack::AnswerPack(const AnswerPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pack()) {
    pack_ = new ::JC::Net::Answer(*from.pack_);
  } else {
    pack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:JC.Net.AnswerPack)
}

inline void AnswerPack::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pack_ = nullptr;
}

AnswerPack::~AnswerPack() {
  // @@protoc_insertion_point(destructor:JC.Net.AnswerPack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnswerPack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pack_;
}

void AnswerPack::ArenaDtor(void* object) {
  AnswerPack* _this = reinterpret_cast< AnswerPack* >(object);
  (void)_this;
}
void AnswerPack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnswerPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnswerPack::Clear() {
// @@protoc_insertion_point(message_clear_start:JC.Net.AnswerPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pack_ != nullptr) {
    delete pack_;
  }
  pack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JC.Net.Answer pack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnswerPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JC.Net.AnswerPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // .JC.Net.Answer pack = 2;
  if (this->_internal_has_pack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JC.Net.AnswerPack)
  return target;
}

size_t AnswerPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JC.Net.AnswerPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .JC.Net.Answer pack = 2;
  if (this->_internal_has_pack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pack_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerPack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnswerPack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerPack::GetClassData() const { return &_class_data_; }

void AnswerPack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnswerPack *>(to)->MergeFrom(
      static_cast<const AnswerPack &>(from));
}


void AnswerPack::MergeFrom(const AnswerPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JC.Net.AnswerPack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_pack()) {
    _internal_mutable_pack()->::JC::Net::Answer::MergeFrom(from._internal_pack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerPack::CopyFrom(const AnswerPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JC.Net.AnswerPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerPack::IsInitialized() const {
  return true;
}

void AnswerPack::InternalSwap(AnswerPack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(pack_, other->pack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerPack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Net
}  // namespace JC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JC::Net::Request* Arena::CreateMaybeMessage< ::JC::Net::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JC::Net::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::JC::Net::Answer* Arena::CreateMaybeMessage< ::JC::Net::Answer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JC::Net::Answer >(arena);
}
template<> PROTOBUF_NOINLINE ::JC::Net::RequestPack* Arena::CreateMaybeMessage< ::JC::Net::RequestPack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JC::Net::RequestPack >(arena);
}
template<> PROTOBUF_NOINLINE ::JC::Net::AnswerPack* Arena::CreateMaybeMessage< ::JC::Net::AnswerPack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JC::Net::AnswerPack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
